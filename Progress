**2019-04-15**
#달성 목표 : React, Bootstrap, Django(NodeJS) 사용하여 기본 웹페이지 만들기

#달성 내용
1.[backend] Django 관련 설치 : 가상환경 생성, django 설치, django-rest-framework (DRF)설치, CORS를 위한 django-cors-headers 설치
-프로젝트 생성 : [django-admin.py]-startproject
-프로젝트 관리 : [manage.py]-startapp, migrate(makemigrations), createsuperuser, runserver

2.[frontend] React 설치 : Node.js(npm), Yarn, react 설치
3.backend + frontend : DRF이용하여 간단한 post api 생성 <-> frontend에서 해당 정보 전시하는 웹페이지 구현

#CORS(Cross-Origin Resource Sharing, HTTP 접근제어 규약)

================================================================================================================================
**2019-04-08**
#달성 내용
1. 파이썬 문법 공부 이어서 하기 및 정리
    1-1)자료형
    ★기본적으로 파이썬에서는 변수,클래스,함수 등 모든 것을 "객체"로 생각한다.
      예를 들면, a=1 -> 1이라는 객체가 있고, 이 객체의 명이 a임.

        -수치형 : int, long, float, complex, ...
        -문자형 : '', "" -> 문자열 선언 후 [] 인덱싱 가능, 범위 검색 가능
        -리스트 : [, ,] append, insert, extend, index, .. 
        -세트 : {,} 리스트 기능 + 교집합, 합집합 가능
        -튜플 : (,) 읽기전용, 속도가 빠름
        -사전(Dictionary) : key와 value의 쌍. 
         items, keys, values, del, clear 등 다양한 검색/ 변경 가능.
         단,인덱스는 지원하지 않음.
         ex) dict(a=1, b=2) 혹은 {'a':1, 'b':2}
        -bool : True/False. 논리 연산자 (and 혹은 &, or 혹은 |, not)
    
    1-2) ★얕은(shallow) 복사/ 깊은(deep) 복사
        #얕은 복사란?
        a = [1,2,3]
        b=a
        => b는 a의 객체의 주소를 참조한다. 
        => 즉, a가 바뀌면 b도 바뀜
        
        #깊은 복사?
        a = [1,2,3]
        b=a[:]
        => b는 a와 동일한 새로운 객체의 주소를 가짐.
    
    1-3) 함수 
    def <함수명> (인자, ...) :
        <구문>
        return <반환값>

     - ★함수는 별도 헤더파일이 없으며 필요할 때 바로 선언하고 사용 가능함.
     - def : 함수 객체를 만든다
     - ★함수명 : 생성된 함수 객체를 참조하는 레퍼런스(reference)
               => 이 함수 레퍼런스는 변수에도 할당할 수 있고(약한 참조), 
                  해당 변수도 동일한 함수를 호출하는 것과 같은 효과가 남.

     -return : 어떤 객체든 반환 가능, 반환 값이 없거나 return문 자체가 없어도 됨.
               단, 하나의 객체만 반환 가능하며 튜플 형식으로 여러 개의 값을 하나에 담아 반환 가능

     -★인자 전달 : 레퍼런스로 전달하나 C/C++의 Call-by-Ref 방식과는 다름.
            왜냐하면 호출자가 전달하는 변수가 변경가능/불가능 이냐에 따라 함수의 내부 처리방식이 다르기 때문
            변경 가능한 변수 : 함수 내부에서 변경 시 외부에 영향을 미침
            변경 불가능한 변수 : 함수 내부에서 변경해도 외부에 영향을 미치지 않음
            Ex.) 리스트 -> 변경 가능, 정수형 -> 변경 불가능

     -스코핑 룰 : namespace의 범위?
                 함수 내부/함수 외부/내장 범위가 존재함
                 (Local / Global / Built-in) 
                 함수에서는 내부->외부->내장 순으로 namespace를 검색한다.
                 함수 내부에서 전역을 고치고 싶을 때?
                 global 명령어 이용
                 Ex.)
                g = 10
                
                def ...
                    global g
                    g=2
                
                전역변수 g의 레퍼런스를 지역변수 이름공간에 생성한다!
                 -> 새로운 지역변수가 생기거나 복사하는 것이 아님.

     -★함수 인자 : 파이썬은 굉장히 유연한 여러 인자방식을 제공함.
       -기본 인자 값 / 키워드 인자 / 가변 인자리스트 / 정의되지 않은 인자 처리 방식

    1-4)★ MVC 패턴 (Model, View, Controller)
    Model : 데이터 담당
    View : 시각적 요소 담당
    Controller : 사용자의 요구사항을 파악하여(URL 해석, URL에 알맞은 메소드가 정의되어 있음) 요청한 기능을 수행하도록 함.    
    User는 특정 URL로 접근함으로써 시스템을 사용(명령)함.
 
    User--(Uses)-->Controller--(Manipulates)-->Model--(Updates)-->View--(Sees)-->User 순으로 요청한 정보가 리턴됨.

2.목표 구성 요소에 대해 알아보기
2-1) CSS (Cascading Style Sheets) : Style Sheet 언어 = 디자인을 위한 언어!
    #필요성?
    : HTML 자체 태그로도 디자인을 할 수는 있다. 하지만 수십만 줄의 태그에 대해 수시로 변경해야 한다면?!
      => style 설정으로 간단하게 한번에 반영 가능하다!

    #표현 방식 
    -<style> 
        a { -> a 태그 선택자
            color:black;  -> 속성
        }
    </style> : html 중 CSS 언어가 들어감을 명시하는 태그
    -혹은 태그 내에서 <a href="..." style="color:red"> 이런 식으로 명시 가능

    #style 태그 내 구성요소 : 선택자(Selector), 선언(Declaration), 속성(Property)
    -선택자는 구체적일 수록 우선순위가 높다! (우선순위대로 설정한 속성이 최종 반영된다.) 
     : 태그(elements) 선택자 < 클래스 선택자 < ID 선택자 
       -클래스 선택자 : 클래스명 앞에 dot이 붙음(.saw) 여러 태그가 같은 클래스를 가질 수 있으나, 하나의 태그에 여러 클래스는 권장하지 않음.
       -ID 선택자 : 태그 중 해당 ID 명을 가지는 태그는 하나 뿐임! (유일성)

    #박스 모델 : border, padding, margin, display, width

2-2) JavaScript (축약하면 JS) : 사용자와 상호작용하는 언어. Dynamic!
    #필요성?
    : 정적인 HTML은 한번 짜면 바뀌지 않는다 -> 이러한 HTML을 제어하기 위해 만들어진 동적인 언어!
      HTML이 이미지라면 JavaScript는 영상!

      <script>1+1</script> 의 실행결과는 문자 그자체가 아니라 계산된 값 2!
    
    #이벤트
     : onclick, onchange, onkeydown (실습 폴더 참조 : helloJavaScript)

    #자바스크립트 실행방법 : 파일 (HTML) / 콘솔 (Console) 
     : 웹페이지 오른쪽 클릭-[검사] 선택 시 Front-End 코드 확인가능, 콘솔 기능 사용 가능!
     
================================================================================================================================
**2019-04-01** - 공부 미흡 (벌금)
#달성 내용
1. 파이썬 문법 공부
2. 파이썬 MVT 구조 공부

**2019-03-25**

#달성 내용

-Web에 대한 이해 향상 : 생활코딩 Web1 수강완료, Web2 수강 진행 중

-개발 환경 구성 : Python, Django, Git, SmartGit, Atom 설치

-"Hello World!" : 로컬 웹서버에서 가져오도록 구현 (SmartGit-GitHub 연결)



#개발 아이디어
-"SW팀 통합 가이드" 웹 사이트 만들기 
  "한 웹 사이트에서 모든 걸 다 접근하여 정보를 얻는다"가 모토
  1) 기존 사이트 통합 
    : 기존에 분리된 개발 관리 사이트들을 하나의 웹 내에서 편리하게 접근/제어 제공
  2) 정보 공유
    : 사업별 중요 정보 공유/취합/알림 용도
      -사업 진행 상태, to do 에 대한 가이드 등...  

  ->웹 개발 시 유용성과 접근성에 대한 아이디어 생각 필요.
  ->통합/기능 추가 할 게 무엇이 있을 지 더 생각해야 함.

-일단 검색엔진 만들기 후 응용 웹 앱으로 발전해나가기
-공부해야 할 것들 : DB 관리 도구, Web 구조, 장고 프레임워크, Python 문법 공부
                

#다음 목표 (~4/1)
-Web에 대한 이해 향상 : 생활코딩 Web2(Python), 파이썬 프로그래밍 공부
-검색 사이트 따라 만들면서 웹 내부 공부하기





-----Version-----
Python : 3.7.2
Django : 2.1.7
Git : 2.21.0 
SmartGit : Win18_2_6
Node.js : 10.15.3

gitHub URL : https://github.com/yh11009/WebStudy